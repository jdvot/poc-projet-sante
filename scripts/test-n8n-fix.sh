#!/bin/bash

# Test n8n Fix
# This script tests if the n8n workflow fix worked

echo "üß™ Test de la Correction n8n"
echo "============================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Load environment variables from .env.local if it exists
if [ -f ".env.local" ]; then
    export $(grep -v '^#' .env.local | xargs)
fi

# Get webhook URL
WEBHOOK_URL="${N8N_WEBHOOK_URL:-$NEXT_PUBLIC_N8N_WEBHOOK_URL}"

if [ -z "$WEBHOOK_URL" ]; then
    print_error "Aucune URL de webhook n8n configur√©e"
    exit 1
fi

print_status "Test du webhook: $WEBHOOK_URL"

# Test payload
TEST_PAYLOAD='{
  "message": "Test de correction",
  "files": [],
  "timestamp": "2024-01-01T00:00:00.000Z",
  "sessionId": "test-fix"
}'

print_status "Envoi du payload de test..."

# Send request
RESPONSE=$(curl -s -w "\n%{http_code}" \
    -X POST \
    -H "Content-Type: application/json" \
    -d "$TEST_PAYLOAD" \
    "$WEBHOOK_URL")

HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)

echo ""
print_status "R√©sultats du test:"
echo "HTTP Status: $HTTP_CODE"
echo "Response Body: $RESPONSE_BODY"

# Analyze results
if [ "$HTTP_CODE" = "200" ]; then
    if [ -z "$RESPONSE_BODY" ]; then
        print_error "‚ùå R√©ponse toujours vide"
        echo ""
        echo "üîß Le probl√®me persiste. V√©rifiez:"
        echo "1. Que le workflow est activ√© dans n8n Cloud"
        echo "2. Qu'un n≈ìud 'Respond to Webhook' est pr√©sent"
        echo "3. Que la configuration du n≈ìud de sortie est correcte"
        echo ""
        echo "üìö Consultez: docs/N8N_WORKFLOW_FIX_GUIDE.md"
    else
        # Try to parse JSON
        if echo "$RESPONSE_BODY" | jq . > /dev/null 2>&1; then
            print_success "‚úÖ R√©ponse JSON valide re√ßue!"
            
            # Check for required fields
            RESPONSE_TEXT=$(echo "$RESPONSE_BODY" | jq -r '.response // "MISSING"')
            MODEL=$(echo "$RESPONSE_BODY" | jq -r '.model // "MISSING"')
            
            if [ "$RESPONSE_TEXT" != "MISSING" ] && [ "$MODEL" != "MISSING" ]; then
                print_success "‚úÖ Tous les champs requis pr√©sents!"
                echo ""
                echo "üéâ Correction r√©ussie! Votre AI Chat devrait maintenant fonctionner."
                echo ""
                echo "üìã Prochaines √©tapes:"
                echo "1. Testez l'AI Chat dans votre application"
                echo "2. V√©rifiez les r√©ponses AI r√©elles"
                echo "3. Configurez des prompts plus avanc√©s"
            else
                print_warning "‚ö†Ô∏è  R√©ponse JSON re√ßue mais champs manquants"
                echo "   Champs manquants:"
                echo "   - response: $RESPONSE_TEXT"
                echo "   - model: $MODEL"
            fi
        else
            print_warning "‚ö†Ô∏è  R√©ponse re√ßue mais pas au format JSON"
            echo "   Contenu: $RESPONSE_BODY"
        fi
    fi
else
    print_error "‚ùå Erreur HTTP: $HTTP_CODE"
    echo "   R√©ponse: $RESPONSE_BODY"
    echo ""
    echo "üîß V√©rifiez:"
    echo "1. Que le workflow est activ√©"
    echo "2. Que l'URL du webhook est correcte"
    echo "3. Que la m√©thode POST est support√©e"
fi

echo ""
print_status "Test termin√©! üéØ" 