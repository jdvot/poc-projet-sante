#!/bin/bash

# Test Complet n8n - Limitless Health
# Ce script teste l'ensemble du syst√®me n8n

echo "üß™ Test Complet n8n - Limitless Health"
echo "======================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Load environment variables from .env.local if it exists
if [ -f ".env.local" ]; then
    # Load only simple variables, avoid complex ones
    export $(grep -v '^#' .env.local | grep -v '=' | grep -v 'KEY' | xargs 2>/dev/null || true)
fi

# Get webhook URL
WEBHOOK_URL="${N8N_WEBHOOK_URL:-$NEXT_PUBLIC_N8N_WEBHOOK_URL}"

if [ -z "$WEBHOOK_URL" ]; then
    print_error "Aucune URL de webhook n8n configur√©e"
    echo "Configurez N8N_WEBHOOK_URL ou NEXT_PUBLIC_N8N_WEBHOOK_URL dans .env.local"
    exit 1
fi

print_status "URL du webhook: $WEBHOOK_URL"

echo ""
print_status "Test 1: Connectivit√© n8n Cloud"
echo "-----------------------------------"

# Test basic connectivity
if curl -s --connect-timeout 5 --max-time 10 "$WEBHOOK_URL" > /dev/null 2>&1; then
    print_success "‚úÖ URL accessible"
else
    print_error "‚ùå URL non accessible"
    exit 1
fi

echo ""
print_status "Test 2: Webhook n8n Direct"
echo "--------------------------------"

# Test direct webhook
TEST_PAYLOAD='{"message":"Test complet n8n","files":[],"timestamp":"2024-01-15T10:30:00.000Z","sessionId":"test-complet"}'

RESPONSE=$(curl -s -w "\n%{http_code}" \
    -X POST \
    -H "Content-Type: application/json" \
    -d "$TEST_PAYLOAD" \
    "$WEBHOOK_URL")

HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)

echo "HTTP Status: $HTTP_CODE"
echo "Response Body: $RESPONSE_BODY"

if [ "$HTTP_CODE" = "200" ] && [ -n "$RESPONSE_BODY" ]; then
    print_success "‚úÖ Webhook n8n fonctionne correctement"
    echo "R√©ponse AI re√ßue: $RESPONSE_BODY"
elif [ "$HTTP_CODE" = "200" ] && [ -z "$RESPONSE_BODY" ]; then
    print_warning "‚ö†Ô∏è  Webhook r√©pond mais avec une r√©ponse vide"
    echo "Le workflow n8n doit √™tre reconfigur√©"
else
    print_error "‚ùå Probl√®me avec le webhook n8n"
    echo "HTTP Code: $HTTP_CODE"
    echo "R√©ponse: $RESPONSE_BODY"
fi

echo ""
print_status "Test 3: API Next.js"
echo "------------------------"

# Check if Next.js server is running
if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
    print_success "‚úÖ Serveur Next.js en cours d'ex√©cution"
else
    print_warning "‚ö†Ô∏è  Serveur Next.js non accessible"
    echo "D√©marrez le serveur avec: npm run dev"
    echo "Test de l'API Next.js ignor√©"
    NEXTJS_AVAILABLE=false
fi

if [ "$NEXTJS_AVAILABLE" != "false" ]; then
    # Test API Next.js
    API_RESPONSE=$(curl -s -w "\n%{http_code}" \
        -X POST \
        -F "message=Test via API Next.js" \
        "http://localhost:3000/api/n8n/chat/")

    API_HTTP_CODE=$(echo "$API_RESPONSE" | tail -n1)
    API_RESPONSE_BODY=$(echo "$API_RESPONSE" | head -n -1)

    echo "API HTTP Status: $API_HTTP_CODE"
    echo "API Response: $API_RESPONSE_BODY"

    if [ "$API_HTTP_CODE" = "200" ]; then
        print_success "‚úÖ API Next.js fonctionne"
        if echo "$API_RESPONSE_BODY" | grep -q "Development Mode"; then
            print_warning "‚ö†Ô∏è  Mode simulation activ√© (n8n non disponible)"
        else
            print_success "‚úÖ R√©ponse AI r√©elle re√ßue"
        fi
    else
        print_error "‚ùå Probl√®me avec l'API Next.js"
    fi
fi

echo ""
print_status "Test 4: Interface Utilisateur"
echo "-----------------------------------"

# Check if UI is accessible
if curl -s http://localhost:3000/ai-chat > /dev/null 2>&1; then
    print_success "‚úÖ Interface utilisateur accessible"
    echo "URL: http://localhost:3000/ai-chat"
else
    print_warning "‚ö†Ô∏è  Interface utilisateur non accessible"
    echo "V√©rifiez que le serveur Next.js est d√©marr√©"
fi

echo ""
print_status "R√©sum√© des Tests"
echo "-------------------"

echo "üìä Statut:"
if [ "$HTTP_CODE" = "200" ] && [ -n "$RESPONSE_BODY" ]; then
    echo "   ‚úÖ n8n Cloud: FONCTIONNEL"
    echo "   ‚úÖ API Next.js: FONCTIONNEL"
    echo "   ‚úÖ Interface: ACCESSIBLE"
    echo ""
    print_success "üéâ Syst√®me n8n enti√®rement op√©rationnel!"
elif [ "$HTTP_CODE" = "200" ] && [ -z "$RESPONSE_BODY" ]; then
    echo "   ‚ö†Ô∏è  n8n Cloud: R√âPONSE VIDE"
    echo "   ‚úÖ API Next.js: FALLBACK ACTIF"
    echo "   ‚úÖ Interface: ACCESSIBLE"
    echo ""
    print_warning "üîß Configuration n8n √† corriger"
    echo "   - Le workflow n8n retourne une r√©ponse vide"
    echo "   - L'API Next.js fonctionne en mode fallback"
    echo "   - L'interface utilisateur est accessible"
else
    echo "   ‚ùå n8n Cloud: PROBL√àME"
    echo "   ‚úÖ API Next.js: FALLBACK ACTIF"
    echo "   ‚ö†Ô∏è  Interface: √Ä V√âRIFIER"
    echo ""
    print_error "üö® Probl√®me de configuration n8n"
fi

echo ""
print_status "Recommandations"
echo "------------------"

if [ "$HTTP_CODE" = "200" ] && [ -z "$RESPONSE_BODY" ]; then
    echo "üîß Pour corriger n8n:"
    echo "   1. Acc√©dez √† n8n Cloud: https://cloud.n8n.io/"
    echo "   2. V√©rifiez le workflow 'My workflow (enhanced + llm response)'"
    echo "   3. Configurez les credentials Gemini"
    echo "   4. Activez le workflow"
    echo ""
    echo "üìã Alternative:"
    echo "   - Utilisez le workflow simplifi√©: n8n-workflow-simple-test.json"
    echo "   - Ou configurez n8n local: docker-compose up n8n"
else
    echo "‚úÖ Syst√®me fonctionnel"
    echo "   - Testez l'interface utilisateur"
    echo "   - V√©rifiez les r√©ponses AI"
    echo "   - Configurez des prompts avanc√©s si n√©cessaire"
fi

echo ""
print_status "Tests termin√©s! üéØ" 